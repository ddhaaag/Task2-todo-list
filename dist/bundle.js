/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/index.html":(t,e,n)=>{n.r(e),n.d(e,{default:()=>o});var r=n("./node_modules/html-loader/dist/runtime/getUrl.js"),a=n.n(r),s=new URL(n("./src/img/Color.png"),n.b);const o='<!DOCTYPE html>\r\n<html lang="en">\r\n<head>\r\n    <meta charset="UTF-8">\r\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\r\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\r\n    <title>TODO LIST</title>\r\n    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700;900&display=swap" rel="stylesheet">\r\n</head>\r\n<body>\r\n\r\n    <header class="header">\r\n        <div class="container header-container">\r\n            <div class="header-logo">\r\n                <img  src="'+a()(s)+'" alt="logo">\r\n            </div>\r\n            <div class="header-search">\r\n                <input type="text" name="fiter" class="filter" placeholder="Search task for to do">\r\n            </div>\r\n        </div>\r\n    </header>\r\n\r\n    <main class="main">\r\n        <div class="container">\r\n            <nav class="tabs-wrap">\r\n                <ul>\r\n                    <li><button class="btns-all choose" data-tabs="add-task">All</button></li>\r\n                    <li><button class="btns-active" data-tabs="active">Active</button></li>\r\n                    <li><button class="btns-done" data-tabs="done">Done</button></li>\r\n                </ul>\r\n            </nav>\r\n\r\n        \r\n            <div class="tasks">\r\n                <form id="form">\r\n                    <div class="tasks__new-task">\r\n                        <label for="new-task">New Task</label>\r\n                        <textarea name="new-task" id="new-task" class="new-task"></textarea>\r\n                        <input type="submit" value="ADD" class="btn-add">\r\n                    </div>\r\n                </form>\r\n                <ul class="task-list"></ul>\r\n            </div>\r\n        </div>\r\n    </main>\r\n</body>\r\n</html>'},"./node_modules/html-loader/dist/runtime/getUrl.js":t=>{t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),e.hash&&(t+=e.hash),e.maybeNeedQuotes&&/[\t\n\f\r "'=<>`]/.test(t)?'"'.concat(t,'"'):t):t}},"./src/style.css":(t,e,n)=>{n.r(e)},"./src/img/Color.png":(t,e,n)=>{t.exports=n.p+"29edca79401bc2d69368.png"}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var s=e[r]={exports:{}};return t[r](s,s.exports,n),s.exports}n.m=t,n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.b=document.baseURI||self.location.href;var r={};(()=>{n.r(r);n("./src/style.css"),n("./src/index.html");const t=document.querySelector("#form"),e=document.querySelector(".task-list"),a=document.querySelector(".filter"),s=document.querySelector("#new-task"),o=(document.querySelector(".delete"),document.querySelector(".tabs-wrap")),l=(document.querySelectorAll(".tabs-wrap > ul > li > button"),document.querySelectorAll("p"),document.querySelectorAll(".task-list > .add-task > p.active"),document.querySelectorAll(".task-list > .add-task > p.done"),document.getElementsByClassName("add-task"));function c(){localStorage.setItem("todos",e.innerHTML)}function i(t){t.shiftKey||13!==t.keyCode||(t.preventDefault(),d(t))}function d(t){t.preventDefault(),""!=s.value&&function(t){const n=document.createElement("li");n.className="add-task",n.innerHTML=`<p>${t}</p><button class="important">MARK IMPORTANT</button><button class="delete"></button>`,e.appendChild(n),c()}(s.value),s.value=""}function u(t){t.target.classList.contains("delete")&&(t.target.parentElement.remove(),c())}function m(t){if(t.target.closest(".important")){const e=t.target.closest(".add-task").querySelector("p"),n=document.createElement("span");n.innerHTML="&#9734;",console.log(e),"MARK IMPORTANT"===t.target.textContent?(t.target.textContent="NOT IMPORTANT",e.prepend(n)):(t.target.textContent="MARK IMPORTANT",e.firstChild.remove()),t.target.classList.toggle("unimportant"),e.classList.toggle("active"),c()}}function p(t){const e=t.target.value.toLowerCase();document.querySelectorAll(".add-task").forEach((function(t){-1!=t.firstChild.textContent.toLowerCase().indexOf(e)?t.style.display="block":t.style.display="none"}))}function y(t){const e=t.target.closest(".add-task");if(e){const n=e.querySelector("p");let r=t.target.closest(".important");t.target.closest(".delete");"P"===t.target.tagName&&(r=e.querySelector(".important"),r.classList.toggle("hidden"),n.classList.toggle("done"),c())}}function f(e){let n=e.target.closest("button");if(!n)return;const r=document.querySelectorAll(".tabs-wrap > ul > li > button"),a=e.target;Array.from(r).forEach((t=>{t.classList.remove("choose")})),a.classList.add("choose"),t.style.display="block";let s=n.getAttribute("data-tabs");Array.from(l).forEach((t=>{t.style.display="none"})),"active"===s?Array.from(l).forEach((t=>{t.firstElementChild.classList.contains("done")?t.style.display="none":t.style.display="block"})):"done"===s?(t.style.display="none",Array.from(l).forEach((t=>{t.firstElementChild.classList.contains("done")&&(t.style.display="block")}))):Array.from(l).forEach((t=>{t.style.display="block"}))}window.onload=()=>{e.innerHTML=localStorage.getItem("todos"),e.childNodes.forEach((t=>{t.style.display="block"}))},s.addEventListener("keydown",i),t.addEventListener("submit",d),e.addEventListener("click",u),e.addEventListener("click",m),e.addEventListener("click",y),a.addEventListener("keyup",p),o.addEventListener("click",f)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,